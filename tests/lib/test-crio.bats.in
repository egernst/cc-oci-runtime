#!/usr/bin/env bats

#  This file is part of cc-oci-runtime.
#
#  Copyright (C) 2017 Intel Corporation
#
#  This program is free software; you can redistribute it and/or
#  modify it under the terms of the GNU General Public License
#  as published by the Free Software Foundation; either version 2
#  of the License, or (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software
#  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

# CC tests data
TEST_DATA="${BATS_TEST_DIRNAME}/../../data/"

# CRI-O URL and version
CRIO_GITHUB="github.com/kubernetes-incubator/cri-o"
CRIO_VERSION="3195f459"

# CRI-O root directory
OCID_ROOT="$GOPATH/src/$CRIO_GITHUB"

# Path of the ocid binary.
OCID_BINARY=${OCID_BINARY:-${OCID_ROOT}/ocid}
# Path of the ocic binary.
OCIC_BINARY=${OCIC_BINARY:-${OCID_ROOT}/ocic}
# Path of the conmon binary.
CONMON_BINARY=${CONMON_BINARY:-${OCID_ROOT}/conmon/conmon}
# Path of the pause binary.
PAUSE_BINARY=${PAUSE_BINARY:-${OCID_ROOT}/pause/pause}
# Path of the default seccomp profile.
SECCOMP_PROFILE=${SECCOMP_PROFILE:-${OCID_ROOT}/seccomp.json}
# Name of the default apparmor profile.
APPARMOR_PROFILE=${APPARMOR_PROFILE:-ocid-default}
# Path of the bin2img binary.
BIN2IMG_BINARY=${BIN2IMG_BINARY:-${OCID_ROOT}/test/bin2img/bin2img}
# Path of the copyimg binary.
COPYIMG_BINARY=${COPYIMG_BINARY:-${OCID_ROOT}/test/copyimg/copyimg}
# Path of tests artifacts.
ARTIFACTS_PATH="@CRIO_CACHE@"
# Path of the checkseccomp binary.
CHECKSECCOMP_BINARY=${CHECKSECCOMP_BINARY:-${OCID_ROOT}/test/checkseccomp/checkseccomp}

# CRI-O Runtime
RUNTIME=${RUNTIME:-cc-oci-runtime}
RUNTIME_PATH=$(command -v $RUNTIME || true)
RUNTIME_BINARY=${RUNTIME_PATH:-/usr/bin/cc-oci-runtime}

TESTDIR=$(mktemp -d)
if [ -e /usr/sbin/selinuxenabled ] && /usr/sbin/selinuxenabled; then
    . /etc/selinux/config
    filelabel=$(awk -F'"' '/^file.*=.*/ {print $2}' /etc/selinux/${SELINUXTYPE}/contexts/lxc_contexts)
    chcon -R ${filelabel} $TESTDIR
fi
OCID_SOCKET="$TESTDIR/ocid.sock"
OCID_CONFIG="$TESTDIR/ocid.conf"
OCID_CNI_CONFIG="$TESTDIR/cni/net.d/"
OCID_CNI_PLUGIN="/opt/cni/bin/"
POD_CIDR="10.88.0.0/16"
POD_CIDR_MASK="10.88.*.*"
mkdir -p $OCID_CNI_CONFIG

PATH=$PATH:$TESTDIR

# Make sure we have a copy of the CRI-O code.
if ! [ -d "$OCID_ROOT" ]; then
    #    mkdir -p "$OCID_ROOT"
    echo "Cloning CRI-O repo..."
    go get $CRIO_GITHUB || true
    pushd $OCID_ROOT && git reset --hard $CRIO_VERSION && popd
fi

# Build the CRI-O binaries
echo "Building CRI-O...($GOPATH)"
make -C ${OCID_ROOT} binaries

cp "$CONMON_BINARY" "$TESTDIR/conmon"

# Make sure we have a copy of the redis:latest image.
if ! [ -d "$ARTIFACTS_PATH"/redis-image ]; then
    mkdir -p "$ARTIFACTS_PATH"/redis-image
    echo "Copying redis image (Only needed during the first run)..."
    if ! "$COPYIMG_BINARY" --import-from=docker://redis --export-to=dir:"$ARTIFACTS_PATH"/redis-image --signature-policy="$TEST_DATA"/policy.json ; then
        echo "Error pulling docker://redis"
        rm -fr "$ARTIFACTS_PATH"/redis-image
        exit 1
    fi
fi

# Retry a command $1 times until it succeeds. Wait $2 seconds between retries.
function retry() {
	local attempts=$1
	shift
	local delay=$1
	shift
	local i

	for ((i=0; i < attempts; i++)); do
		run "$@"
		if [[ "$status" -eq 0 ]] ; then
			return 0
		fi
		sleep $delay
	done

	echo "Command \"$@\" failed $attempts times. Output: $output"
	false
}

# Waits until the given ocid becomes reachable.
function wait_until_reachable() {
	retry 15 1 ocic runtimeversion
}

# Start ocid.
function start_ocid() {
	# Don't forget: bin2img, copyimg, and ocid have their own default drivers, so if you override any, you probably need to override them all
	if ! [ "$3" = "--no-pause-image" ] ; then
		"$BIN2IMG_BINARY" --root "$TESTDIR/ocid" --runroot "$TESTDIR/ocid-run" --source-binary "$PAUSE_BINARY"
	fi
	"$COPYIMG_BINARY" --root "$TESTDIR/ocid" --runroot "$TESTDIR/ocid-run" --image-name=redis --import-from=dir:"$ARTIFACTS_PATH"/redis-image --add-name=docker://docker.io/library/redis:latest --signature-policy="$TEST_DATA"/policy.json
	"$OCID_BINARY" --conmon "$CONMON_BINARY" --listen "$OCID_SOCKET" --runtime "$RUNTIME_BINARY" --root "$TESTDIR/ocid" --runroot "$TESTDIR/ocid-run" --seccomp-profile "$SECCOMP_PROFILE" --apparmor-profile "$APPARMOR_PROFILE" --cni-config-dir "$OCID_CNI_CONFIG" --signature-policy "$TEST_DATA"/policy.json --config /dev/null config >$OCID_CONFIG
	"$OCID_BINARY" --debug --config "$OCID_CONFIG" & OCID_PID=$!
	wait_until_reachable

	run ocic image status --id=redis
	if [ "$status" -ne 0 ] ; then
	        echo "Pulling redis image..."
		ocic image pull redis:latest
	fi
	REDIS_IMAGEID=$(ocic image status --id=redis | head -1 | sed -e "s/ID: //g")
}

# Run ocid using the binary specified by $OCID_BINARY.
# This must ONLY be run on engines created with `start_ocid`.
function ocid() {
	"$OCID_BINARY" --listen "$OCID_SOCKET" "$@"
}

# Run ocic using the binary specified by $OCIC_BINARY.
function ocic() {
	"$OCIC_BINARY" --connect "$OCID_SOCKET" "$@"
}

function cleanup_ctrs() {
	run ocic ctr list --quiet
	if [ "$status" -eq 0 ]; then
		if [ "$output" != "" ]; then
			printf '%s\n' "$output" | while IFS= read -r line
			do
			   ocic ctr stop --id "$line" || true
			   ocic ctr remove --id "$line"
			done
		fi
	fi
}

function cleanup_pods() {
	run ocic pod list --quiet
	if [ "$status" -eq 0 ]; then
		if [ "$output" != "" ]; then
			printf '%s\n' "$output" | while IFS= read -r line
			do
			   ocic pod stop --id "$line" || true
			   ocic pod remove --id "$line"
			done
		fi
	fi
}

# Stop ocid.
function stop_ocid() {
	if [ "$OCID_PID" != "" ]; then
		kill "$OCID_PID" >/dev/null 2>&1
		wait "$OCID_PID"
		rm -f "$OCID_CONFIG"
	fi
}

function cleanup_test() {
	for i in `ls /var/lib/ocid/sandboxes/ 2> /dev/null`; do
		umount /var/lib/ocid/sandboxes/$i/shm 2> /dev/null;
	done

	for i in `find /tmp -name "shm" `; do
		umount $i 2> /dev/null;
		rm -rf $i
	done

	for i in `find /tmp -name "*.conf" `; do
		umount $i 2> /dev/null;
		rm -rf $i
	done

	for i in `find /tmp -name "tmp.*" `; do
		for j in `ls $i/ocid/devicemapper/mnt/`; do
			umount $i/ocid/devicemapper/mnt/$j
		done

		umount $i/ocid/devicemapper 2> /dev/null;
		rm -rf $i
	done

	rm -rf /var/lib/ocid 2> /dev/null
	rm -rf "$TESTDIR"
}
