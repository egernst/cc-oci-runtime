#!/bin/bash

#  This file is part of cc-oci-runtime.
#
#  Copyright (C) 2016 Intel Corporation
#
#  This program is free software; you can redistribute it and/or
#  modify it under the terms of the GNU General Public License
#  as published by the Free Software Foundation; either version 2
#  of the License, or (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software
#  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

DOCKER_EXE="docker"
DOCKER_SERVICE="docker-cor"
SCRIPT_PATH=$(dirname $(readlink -f $0))
RESULT_DIR="${SCRIPT_PATH}/../results"
HYPERVISOR_PATH="@QEMU_PATH@"
CC_SHIM_PATH="/usr/libexec/cc-shim"
number_of_attempts=5

# Checking that default runtime is cor
function runtime_docker(){
	default_runtime=`$DOCKER_EXE info 2>/dev/null | grep "^Default Runtime" | cut -d: -f2 | tr -d '[[:space:]]'`
	if [ "$default_runtime" != "cor" ]; then
		die "Tests need to run with COR runtime"
	fi
}

die(){
	msg="$*"
	echo "ERROR: $msg" >&2
	exit 1
}

function backup_old_file(){
	if [ -f "$1" ]; then
		mv "$1" "$1.old"
	fi
}

function write_csv_header(){
	test_file="$1"
	echo "TestName,TestArguments,Value,Platform,OSVersion" > "$test_file"
}

function write_result_to_file(){
	test_name="$1"
	test_args="$2"
	test_data="$3"
	test_file="$4"
	test_platform=$(grep -m1 "model name" /proc/cpuinfo | cut -d: -f2)
	os_id=$(grep "^ID" /usr/lib/os-release | cut -d= -f2)
	os_ver_id=$(grep "^VERSION_ID" /usr/lib/os-release | cut -d= -f2)
	os_ver=$(echo "$os_id-$os_ver_id")
	echo "$test_name,$test_args,$test_data,$test_platform,$os_ver" >> "$test_file"
}

function get_average(){
	test_file=$1
	count=0;
	total=0;
	values=$(awk -F, 'FNR>=2{ print $3; }' "$test_file")
	for i in $values; do
		total=$(echo $total+$i | bc )
		count=$((count + 1))
	done
	echo "Average: " >> "$test_file"
	echo "scale=2; $total / $count" | bc >> "$test_file"
}

function random_name() {
	echo $(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1)
}

function check_active_process() {
	process=$1
	if pgrep -f "$process" > /dev/null; then
		return 1
	else
		return 0
	fi
}

# This function checks if there are containers or
# cc-shim and qemu-lite processes up, if found, they are
# killed to start test with clean environment.
# The function is intended to be used in the setup() of
# the docker integration tests for cc-oci-runtime.
function kill_processes_before_start() {
	[ $("$DOCKER_EXE" ps -q) ] && "$DOCKER_EXE" kill $("$DOCKER_EXE" ps -q)
	check_active_process "$HYPERVISOR_PATH" || killall "$HYPERVISOR_PATH"
	check_active_process "$CC_SHIM_PATH" || killall "$CC_SHIM_PATH"
}

# This function checks for active processes that were
# left behind by cc-oci-runtime.
# The function is intended to be used in the teardown() of
# the docker integration tests for cc-oci-runtime.
function check_no_processes_up() {
	wait_time=5
	while [ "$wait_time" -gt 0 ]; do
		if [ ! -z $("$DOCKER_EXE" ps -q) ] && \
		[ ! "$(check_active_process qemu)" ] && \
		[ ! "$(check_active_process cc-shim)" ]
		then
			wait_time=$((wait_time-1))
			sleep 1
		else
			return 0
		fi
	done
	return 1
}

# This function will check that swarm is not running
# in order to clean up the environment
function clean_swarm_status() {
	for j in `seq 0 $number_of_attempts`; do
		if $DOCKER_EXE node ls; then
			$DOCKER_EXE swarm leave --force
			# docker swarm leave is not inmediately so it requires time to finish
			sleep 5
		else
			break
		fi
	done
}

