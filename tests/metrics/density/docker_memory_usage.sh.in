#!/bin/bash

#  This file is part of cc-oci-runtime.
#
#  Copyright (C) 2016 Intel Corporation
#
#  This program is free software; you can redistribute it and/or
#  modify it under the terms of the GNU General Public License
#  as published by the Free Software Foundation; either version 2
#  of the License, or (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software
#  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

#  Description of the test:
#  This test launches certain number of containers and puts them into
#  sleep mode for a certain period of time. Then the test checks the
#  amount of memory used by each container
#  This test uses smem tool to get the memory used.

set -e

SCRIPT_PATH=$(dirname "$(readlink -f "$0")")
source "${SCRIPT_PATH}/../../lib/test-common.bash"


# Busybox image: Choose a small workload image, this is
# in order to measure the runtime footprint, not the workload
# footprint.
IMAGE='busybox'

CMD='sh'
CC_NUMBER="$1"
WAIT_TIME="$2"
TEST_NAME="Clear Containers Memory Usage"
TEST_ARGS="rootfs=${IMAGE} units=kb"
TEST_RESULT_FILE=$(echo "${RESULT_DIR}/${TEST_NAME}" | sed 's| |-|g')
SMEM_BIN=$(command -v smem || true)
QEMU_BIN="@QEMU_PATH@"
PROXY_BIN="@libexecdir@/cc-proxy"
SHIM_BIN="@libexecdir@/cc-shim"

# Show help about this script
function help(){
usage=$(cat << EOF
Usage: $0 <count> <wait_time>
   Description:
        <count>      : Number of Clear Containers to run.
        <wait_time>  : Time in seconds to wait before to take
                       metrics.
EOF
)
	echo "$usage"
}

# This function measures the PSS average
# memory of a process.
function get_pss_memory(){
	ps="$1"
	mem_amount=0
	count=0
	avg=0

	data=$("$SMEM_BIN" --no-header -P "^$ps" -c "pss")
	for i in $data;do
		if (( $i > 0 ));then
			mem_amount=$(( $i + $mem_amount ))
			count=$(( $count + 1 ))
		fi
	done

	if (( $count > 0 ));then
		avg=$(echo "scale=2; $mem_amount / $count" | bc -l)
	fi

	echo "$avg"
}

# It calculates the memory footprint
# of a CC.
function get_docker_memory_usage(){
	qemu_mem=0
	cc_shim_mem=0
	proxy_mem=0
	cc_proxy_mem=0

	containers=()

	for i in $(seq 1 "$CC_NUMBER"); do
		containers+=($(random_name))
		${DOCKER_EXE} run --name ${containers[-1]} -tid $IMAGE $CMD
	done

	# This time will determine if the data
	# will be taken w/o KSM working.
	sleep "$WAIT_TIME"

	# Get PSS memory of CC components.
	qemu_mem="$(get_pss_memory "$QEMU_BIN")"
	cc_shim_mem="$(get_pss_memory "$SHIM_BIN")"
	proxy_mem="$(get_pss_memory "$PROXY_BIN")"
	cc_proxy_mem="$(echo "scale=2; $proxy_mem / $CC_NUMBER" | bc -l)"
	cc_mem_usage=$(echo "scale=2; $qemu_mem + $cc_shim_mem + $cc_proxy_mem" | bc -l)

	write_result_to_file "$TEST_NAME" "$TEST_ARGS" "$cc_mem_usage" "$TEST_RESULT_FILE"
	docker rm -f ${containers[@]}
}

# Verify enough arguments
if [ $# -ne 2 ];then
	echo >&2 "error: No enough arguments"
	help
	exit 1;
fi

echo "Executing Test: ${TEST_NAME}"
if [ "$SMEM_BIN" == "" ]; then
	die "smem is not installed in your system, skipping test"
fi

# Restarting services
systemctl restart cc-proxy
systemctl restart docker

backup_old_file "$TEST_RESULT_FILE"
write_csv_header "$TEST_RESULT_FILE"
get_docker_memory_usage
get_average "$TEST_RESULT_FILE"
